{"version":3,"sources":["assets/chevronDown.svg","LandingContainer.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","LandingContainer","className","style","color","Delay","ms","timeout","to","spy","smooth","duration","height","marginTop","src","Chevron","alt","Component","App","renderLandingContainer","id","left","delay","right","xs","sm","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,yC,sRCQ9BC,G,YAAb,iLAMI,OACE,yBAAKC,UAAU,oBACb,6BACE,0BAAMA,UAAU,aAAa,WAC7B,0BAAMA,UAAU,cAAc,UAEhC,6BACE,kBAAC,IAAD,CAAQC,MAAO,CAAEC,MAAO,UACtB,kBAAC,IAAOC,MAAR,CAAcC,GAAI,MAClB,0BAAMJ,UAAW,cAAjB,cACA,kBAAC,IAAOG,MAAR,CAAcC,GAAI,MAClB,0BAAMJ,UAAW,cAAjB,oBACA,kBAAC,IAAOG,MAAR,CAAcC,GAAI,MAClB,0BAAMJ,UAAW,cAAjB,uBAGJ,kBAAC,OAAD,CAAMK,QAAS,KACb,kBAAC,OAAD,CAAMC,GAAG,UAAUC,KAAK,EAAMC,QAAQ,EAAMC,SAAU,KACpD,yBAAKT,UAAW,UAAWC,MAAO,CAAEC,MAAO,QAASQ,OAAQ,GAAIC,UAAW,QAAUC,IAAKC,IAASC,IAAI,qBAxBnH,GAAsCC,cC2EvBC,E,2MAnEbC,uBAAyB,WACvB,OAAO,yBAAKjB,UAAU,oBACpB,6BACE,0BAAMA,UAAU,aAAa,WAC7B,0BAAMA,UAAU,cAAc,UAEhC,6BACE,kBAAC,IAAD,CAAQC,MAAO,CAAEC,MAAO,UACtB,kBAAC,IAAOC,MAAR,CAAcC,GAAI,MAClB,0BAAMJ,UAAW,cAAjB,cACA,kBAAC,IAAOG,MAAR,CAAcC,GAAI,MAClB,0BAAMJ,UAAW,cAAjB,oBACA,kBAAC,IAAOG,MAAR,CAAcC,GAAI,MAClB,0BAAMJ,UAAW,cAAjB,uBAGJ,kBAAC,OAAD,CAAMK,QAAS,KACb,kBAAC,OAAD,CAAMC,GAAG,UAAUC,KAAK,EAAMC,QAAQ,EAAMC,SAAU,KACpD,yBAAKT,UAAW,UAAWC,MAAO,CAAEC,MAAO,QAASQ,OAAQ,GAAIC,UAAW,QAAUC,IAAKC,IAASC,IAAI,kB,wEAQ7G,OACE,yBAAKd,UAAU,OACb,yBAAKA,UAAU,UACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,mBAAmBkB,GAAG,WACnC,kBAAC,OAAD,CAAMC,MAAI,EAACC,MAAO,IAAKf,QAAS,KAC9B,wCACA,8BAEF,kBAAC,OAAD,CAAMgB,OAAK,EAACD,MAAO,IAAKf,QAAS,KAC/B,yBAAKL,UAAU,eACb,kBAAC,YAAD,CAAWA,UAAU,eACrB,kBAAC,MAAD,KACE,kBAAC,MAAD,CAAKsB,GAAI,GAAIC,GAAI,GAAjB,0FAIA,kBAAC,MAAD,CAAKD,GAAI,GAAIC,GAAI,GAAjB,gGAGA,kBAAC,MAAD,CAAKD,GAAI,GAAIC,GAAI,GAAjB,2G,GA/CAR,aCHES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f75af285.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/chevronDown.0723c71a.svg\";","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport './LandingContainer.css'\nimport { Fade } from 'react-reveal';\nimport { Link, animateScroll as scroll } from 'react-scroll';\nimport Typist from 'react-typist';\nimport Chevron from './assets/chevronDown.svg';\n\nexport class LandingContainer extends Component {\n  static propTypes = {\n\n  }\n\n  render() {\n    return (\n      <div className=\"LandingContainer\">\n        <div>\n          <span className=\"NameFirst\">{'James  '}</span>\n          <span className=\"NameSecond\">{' Meng'}</span>\n        </div>\n        <div>\n          <Typist style={{ color: 'white' }}>\n            <Typist.Delay ms={1000} />\n            <span className={'scrollText'}>Developer.</span>\n            <Typist.Delay ms={500} />\n            <span className={'scrollText'}> Student Leader.</span>\n            <Typist.Delay ms={500} />\n            <span className={'scrollText'}> Tech Enthusiast.</span>\n          </Typist>\n        </div>\n        <Fade timeout={2000}>\n          <Link to=\"AboutMe\" spy={true} smooth={true} duration={1000}>\n            <img className={'Chevron'} style={{ color: 'white', height: 24, marginTop: '2rem' }} src={Chevron} alt='view more' />\n          </Link>\n        </Fade>\n      </div>\n    )\n  }\n}\n\nexport default LandingContainer\n","import React, { Component } from 'react';\nimport { Fade } from 'react-reveal';\nimport Typist from 'react-typist';\nimport Chevron from './assets/chevronDown.svg';\nimport { Link, animateScroll as scroll } from 'react-scroll';\nimport { Container, Row, Col } from 'react-grid-system';\nimport { appStyles } from './Style.js';\nimport './App.css';\n\nimport { LandingContainer } from './LandingContainer';\n\nconst styles = appStyles();\n\n// Convert the about me page to 3 columns - more effective use ofthe white space\n\nclass App extends Component {\n  renderLandingContainer = () => {\n    return <div className=\"LandingContainer\">\n      <div>\n        <span className=\"NameFirst\">{'James  '}</span>\n        <span className=\"NameSecond\">{' Meng'}</span>\n      </div>\n      <div>\n        <Typist style={{ color: 'white' }}>\n          <Typist.Delay ms={1000} />\n          <span className={'scrollText'}>Developer.</span>\n          <Typist.Delay ms={500} />\n          <span className={'scrollText'}> Student Leader.</span>\n          <Typist.Delay ms={500} />\n          <span className={'scrollText'}> Tech Enthusiast.</span>\n        </Typist>\n      </div>\n      <Fade timeout={2000}>\n        <Link to=\"AboutMe\" spy={true} smooth={true} duration={1000}>\n          <img className={'Chevron'} style={{ color: 'white', height: 24, marginTop: '2rem' }} src={Chevron} alt='view more' />\n        </Link>\n      </Fade>\n    </div>;\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"Filter\">\n          <LandingContainer />\n          <div className='AboutMeContainer' id='AboutMe'>\n            <Fade left delay={400} timeout={2000}>\n              <h1 >About Me</h1>\n              <hr />\n            </Fade>\n            <Fade right delay={800} timeout={2000}>\n              <div className='AboutMeBody'>\n                <Container className='AboutMeList'>\n                <Row>\n                  <Col xs={12} sm={4}>\n                      I enjoy working with new technologies and\n                      finding simple solutions to complex problems\n                  </Col>\n                  <Col xs={12} sm={4}>\n                    I'm always picking up new hobbies, but photography, snowboarding, and hiking are consistent.\n                  </Col>\n                  <Col xs={12} sm={4}>\n                    I'm always picking up new hobbies, but photography, snowboarding, and hiking are consistent.\n                  </Col>\n                </Row>  \n                </Container>\n                {/* <h3>\n                  I'm passionate about finding simple solutions to complex problems\n                  <br />\n                  As someone who believes in continuous growth, I'm always trying find\n                  new opportunities to push myself.\n                </h3> */}\n              </div>\n            </Fade>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}